# Spring Boot incluent par défaut un serveur Web intégré préconfiguré, adresse et port du serveur  8080 par défaut.
server.port: 9001

#logging.level.org.hibernate.SQL=DEBUG
#logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE
#logging.level.org.springframework.jdbc.core.JdbcTemplate=DEBUG
#logging.level.org.springframework.jdbc.core.StatementCreatorUtils=TRACE

logging.springframework.boot.web.embedded.tomcat: INFO

spring:
  # MySQL Configuration
  datasource:
    url: jdbc:mysql://localhost:3306/todolist2
    username: root
    password:
    driver-class-name: com.mysql.cj.jdbc.Driver
  jpa:
    hibernate:
      # Generer ou mettre à jour automatiquement les tables de la base de données à partir des classes d'entites.
      # create-drop:
      # create: Crée le schema de BDD et detruit le prédécent
      # none: Désactive DDL
      # update: créer ou mets à jour le schéma de BDD si necessaire
      # validate:
      ddl-auto: create

    # Le moyen le plus simple de vider les requêtes sql vers la sortie standard mais a priori non recommandé
    show-sql: true
    properties:
      hibernate:
        # Pour embellir
        format_sql: true
        #database: mysql
        #database-plateform:
      javax:
        persistence:
          schema-generation:
            scripts:
              # Génère un schéma de BDD avec Spring Boot JPA à partir des des entités
              # Actions ( https://www.baeldung.com/spring-data-jpa-generate-db-schema)
              #       none            - ne génère aucune commande DDL
              #       create          - génère uniquement des commandes de création de base de données
              #       drop            - génère uniquement des commandes de suppression de base de données
              #       drop-and-create - génère des commandes de suppression de base de données suivies de commandes de création
              # action: create
              # create-target: create.sql
              # create-source: metadata




